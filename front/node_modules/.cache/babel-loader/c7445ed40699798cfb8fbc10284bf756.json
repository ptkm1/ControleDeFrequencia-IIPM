{"ast":null,"code":"var _jsxFileName = \"/home/patrick/Desktop/IIPM_Frequencia/Baseado/front/src/Presentation/Screens/Sandbox.Screen.tsx\",\n    _s = $RefreshSig$();\n\nimport { API } from 'Infrastructure/APIS';\nimport MaterialTable from 'material-table';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Screens() {\n  _s();\n\n  const [frequencia, setFrequencia] = useState(); // a que ser치 renderizada na tabela.\n\n  const [NovaFrequencia, setNovaFrequencia] = useState(); // a quqe ser치 enviada para atualizar no backend\n\n  console.log(NovaFrequencia);\n  console.warn(frequencia);\n  const columns = [{\n    title: \"Nome\",\n    field: \"nome\"\n  }, {\n    title: \"Cargo\",\n    field: \"cargo\"\n  }, {\n    title: \"Matricula\",\n    field: \"matricula\"\n  }, {\n    title: \"Telefone\",\n    field: \"telefone\"\n  }, {\n    title: \"janeiro\",\n    field: \"janeiro\"\n  }, {\n    title: \"abril\",\n    field: 'abril'\n  }, {\n    title: \"maio\",\n    field: \"maio\"\n  }, {\n    title: \"junho\",\n    field: \"junho\"\n  }, {\n    title: \"julho\",\n    field: \"julho\"\n  }, {\n    title: \"agosto\",\n    field: \"agosto\"\n  }, {\n    title: \"setembro\",\n    field: \"setembro\"\n  }, {\n    title: \"outubro\",\n    field: \"outubro\"\n  }, {\n    title: \"novembro\",\n    field: \"novembro\"\n  }, {\n    title: \"dezembro\",\n    field: \"dezembro\"\n  }];\n  useEffect(() => {\n    (async () => {\n      const {\n        data\n      } = await API.get(\"/servidor/frequencia\");\n      const frequency = data.map((a, key) => {\n        const frequencia = a.frequencia[0];\n        (frequencia === null || frequencia === void 0 ? true : delete frequencia.id) && delete a.frequencia;\n        const frequenciaConcatenada = Object.assign(a, frequencia);\n        return frequenciaConcatenada;\n      });\n      setFrequencia(frequency);\n    })();\n  }, []);\n\n  const handleAddUser = async payload => {\n    try {\n      const {\n        data\n      } = await API.post('/servidor', payload);\n      setFrequencia([...frequencia, data]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleDeleteUser = async payload => {\n    console.log(payload);\n\n    try {\n      const {\n        data\n      } = await API.delete(`/servidor/${payload.id}`);\n      window.location.reload();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleUpdateUser = async payload => {\n    const servidor = {\n      nome: payload.nome,\n      telefone: payload.telefone,\n      matricula: payload.matricula,\n      rg: payload.rg,\n      endereco: payload.endereco,\n      cargo: payload.cargo,\n      data_de_nascimento: payload.data_de_nascimento,\n      tipoDoServidor: payload.tipoDoServidor\n    };\n\n    try {\n      const {\n        data\n      } = await API.patch(`/servidor/${payload.id}`, payload);\n      setFrequencia([...frequencia, data]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleDeleteRow = selectedRow => new Promise((resolve, reject) => {\n    const index = selectedRow.tableData.id;\n    const updatedRows = [...frequencia];\n    updatedRows.splice(index, 1);\n    setTimeout(() => {\n      setFrequencia(updatedRows);\n      resolve();\n    }, 2000);\n  });\n\n  const handleUpdateRow = (updatedRow, oldRow) => new Promise((resolve, reject) => {\n    const index = oldRow.tableData.id;\n    const updatedRows = [...frequencia];\n    updatedRows[index] = updatedRow;\n    setTimeout(() => {\n      setFrequencia(updatedRows);\n      resolve();\n    }, 2000);\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n      data: frequencia,\n      columns: columns,\n      editable: {\n        onRowAdd: handleAddUser,\n        onRowDelete: handleDeleteUser,\n        onRowUpdate: handleUpdateUser\n      },\n      options: {\n        actionsColumnIndex: -1,\n        addRowPosition: \"first\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Screens, \"dl5FUZe1l9aNGqd9tvU9uXLO0q0=\");\n\n_c = Screens;\nexport default Screens;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screens\");","map":{"version":3,"sources":["/home/patrick/Desktop/IIPM_Frequencia/Baseado/front/src/Presentation/Screens/Sandbox.Screen.tsx"],"names":["API","MaterialTable","React","useEffect","useState","Screens","frequencia","setFrequencia","NovaFrequencia","setNovaFrequencia","console","log","warn","columns","title","field","data","get","frequency","map","a","key","id","frequenciaConcatenada","Object","assign","handleAddUser","payload","post","error","handleDeleteUser","delete","window","location","reload","handleUpdateUser","servidor","nome","telefone","matricula","rg","endereco","cargo","data_de_nascimento","tipoDoServidor","patch","handleDeleteRow","selectedRow","Promise","resolve","reject","index","tableData","updatedRows","splice","setTimeout","handleUpdateRow","updatedRow","oldRow","onRowAdd","onRowDelete","onRowUpdate","actionsColumnIndex","addRowPosition"],"mappings":"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","sourcesContent":["import { API } from 'Infrastructure/APIS';\nimport MaterialTable from 'material-table';\nimport React, { useEffect, useState } from 'react';\n\n\nfunction Screens() {\n  const [frequencia, setFrequencia]: any = useState(); // a que ser치 renderizada na tabela.\n  const [NovaFrequencia, setNovaFrequencia]: any = useState() // a quqe ser치 enviada para atualizar no backend\n  console.log(NovaFrequencia)\n  console.warn(frequencia)\n\n\n  const columns: any = [\n    { title: \"Nome\", field: \"nome\", },\n    { title: \"Cargo\", field: \"cargo\" },\n    { title: \"Matricula\", field: \"matricula\" },\n    { title: \"Telefone\", field: \"telefone\" },\n    { title: \"janeiro\", field: \"janeiro\" },\n    { title: \"abril\", field: 'abril', },\n    { title: \"maio\", field: \"maio\", },\n    { title: \"junho\", field: \"junho\", },\n    { title: \"julho\", field: \"julho\", },\n    { title: \"agosto\", field: \"agosto\", },\n    { title: \"setembro\", field: \"setembro\", },\n    { title: \"outubro\", field: \"outubro\", },\n    { title: \"novembro\", field: \"novembro\", },\n    { title: \"dezembro\", field: \"dezembro\", },\n  ]\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await API.get(\"/servidor/frequencia\");\n      const frequency = data.map((a: any, key: any) => {\n        const frequencia = a.frequencia[0]\n        delete frequencia?.id && delete a.frequencia\n        const frequenciaConcatenada = Object.assign(a, frequencia)\n        return frequenciaConcatenada\n      })\n      setFrequencia(frequency);\n    })();\n  }, [])\n\n  const handleAddUser = async (payload: any) => {\n    try {\n      const { data } = await API.post('/servidor', payload)\n      setFrequencia([...frequencia, data])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleDeleteUser = async (payload: any) => {\n    console.log(payload)\n    try {\n      const { data } = await API.delete(`/servidor/${payload.id}`)\n\n      window.location.reload()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleUpdateUser = async (payload: any) => {\n\n    const servidor = {\n      nome: payload.nome,\n      telefone: payload.telefone,\n      matricula: payload.matricula,\n      rg: payload.rg,\n      endereco: payload.endereco,\n      cargo: payload.cargo,\n      data_de_nascimento: payload.data_de_nascimento,\n      tipoDoServidor: payload.tipoDoServidor,\n    }\n\n    try {\n      const { data } = await API.patch(`/servidor/${payload.id}`, payload)\n      setFrequencia([...frequencia, data])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleDeleteRow = (selectedRow: any) => new Promise((resolve: any, reject) => {\n    const index = selectedRow.tableData.id;\n    const updatedRows = [...frequencia]\n\n    updatedRows.splice(index, 1)\n    setTimeout(() => {\n      setFrequencia(updatedRows)\n      resolve()\n    }, 2000)\n  })\n\n  const handleUpdateRow = (updatedRow: any, oldRow: any) => new Promise((resolve: any, reject) => {\n    const index = oldRow.tableData.id;\n    const updatedRows = [...frequencia]\n    updatedRows[index] = updatedRow\n    setTimeout(() => {\n      setFrequencia(updatedRows)\n      resolve()\n    }, 2000)\n  })\n\n  return (\n    <div>\n      <MaterialTable\n        data={frequencia}\n        columns={columns}\n        editable={{\n          onRowAdd: handleAddUser,\n          onRowDelete: handleDeleteUser,\n          onRowUpdate: handleUpdateUser\n        }}\n        options={{\n          actionsColumnIndex: -1, addRowPosition: \"first\"\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Screens;"]},"metadata":{},"sourceType":"module"}