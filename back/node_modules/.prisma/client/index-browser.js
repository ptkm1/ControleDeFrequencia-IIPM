
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.8.1
 * Query Engine version: 34df67547cf5598f5a6cd3eb45f14ee70c3fb86f
 */
Prisma.prismaVersion = {
  client: "3.8.1",
  engine: "34df67547cf5598f5a6cd3eb45f14ee70c3fb86f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.PostoScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  nome: 'nome',
  telefone: 'telefone',
  telefone2: 'telefone2',
  telefone3: 'telefone3',
  tipoPosto: 'tipoPosto'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  postoId: 'postoId'
});

exports.Prisma.ServidorScalarFieldEnum = makeEnum({
  id: 'id',
  nome: 'nome',
  telefone: 'telefone',
  matricula: 'matricula',
  rg: 'rg',
  endereco: 'endereco',
  cargo: 'cargo',
  data_de_nascimento: 'data_de_nascimento',
  tipoDoServidor: 'tipoDoServidor'
});

exports.Prisma.FrequenciaScalarFieldEnum = makeEnum({
  id: 'id',
  janeiro: 'janeiro',
  fevereiro: 'fevereiro',
  marco: 'marco',
  abril: 'abril',
  maio: 'maio',
  junho: 'junho',
  julho: 'julho',
  agosto: 'agosto',
  setembro: 'setembro',
  outubro: 'outubro',
  novembro: 'novembro',
  dezembro: 'dezembro',
  servidorId: 'servidorId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.TipoPosto = makeEnum({
  CAPITAL: 'CAPITAL',
  INTERIOR: 'INTERIOR',
  MOVEL: 'MOVEL'
});

exports.TipoServidor = makeEnum({
  COORDENADOR: 'COORDENADOR',
  FUNCIONARIO: 'FUNCIONARIO',
  CARGO: 'CARGO'
});

exports.Prisma.ModelName = makeEnum({
  Posto: 'Posto',
  Profile: 'Profile',
  Servidor: 'Servidor',
  Frequencia: 'Frequencia'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
