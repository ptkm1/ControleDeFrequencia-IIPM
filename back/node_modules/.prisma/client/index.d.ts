
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Posto
 * 
 */
export type Posto = {
  id: string
  email: string
  nome: string | null
  telefone: string | null
  telefone2: string | null
  telefone3: string | null
  tipoPosto: TipoPosto
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  id: string
  postoId: string
}

/**
 * Model Servidor
 * 
 */
export type Servidor = {
  id: string
  nome: string
  telefone: string | null
  matricula: string
  rg: string | null
  endereco: string | null
  cargo: string | null
  data_de_nascimento: string | null
  tipoDoServidor: TipoServidor
}

/**
 * Model Frequencia
 * 
 */
export type Frequencia = {
  id: number
  janeiro: string | null
  fevereiro: string | null
  marco: string | null
  abril: string | null
  maio: string | null
  junho: string | null
  julho: string | null
  agosto: string | null
  setembro: string | null
  outubro: string | null
  novembro: string | null
  dezembro: string | null
  servidorId: string | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const TipoPosto: {
  CAPITAL: 'CAPITAL',
  INTERIOR: 'INTERIOR',
  MOVEL: 'MOVEL'
};

export type TipoPosto = (typeof TipoPosto)[keyof typeof TipoPosto]


export const TipoServidor: {
  COORDENADOR: 'COORDENADOR',
  FUNCIONARIO: 'FUNCIONARIO',
  CARGO: 'CARGO'
};

export type TipoServidor = (typeof TipoServidor)[keyof typeof TipoServidor]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Postos
 * const postos = await prisma.posto.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Postos
   * const postos = await prisma.posto.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.posto`: Exposes CRUD operations for the **Posto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Postos
    * const postos = await prisma.posto.findMany()
    * ```
    */
  get posto(): Prisma.PostoDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.servidor`: Exposes CRUD operations for the **Servidor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servidors
    * const servidors = await prisma.servidor.findMany()
    * ```
    */
  get servidor(): Prisma.ServidorDelegate<GlobalReject>;

  /**
   * `prisma.frequencia`: Exposes CRUD operations for the **Frequencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Frequencias
    * const frequencias = await prisma.frequencia.findMany()
    * ```
    */
  get frequencia(): Prisma.FrequenciaDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.8.1
   * Query Engine version: 34df67547cf5598f5a6cd3eb45f14ee70c3fb86f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Posto: 'Posto',
    Profile: 'Profile',
    Servidor: 'Servidor',
    Frequencia: 'Frequencia'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PostoCountOutputType
   */


  export type PostoCountOutputType = {
    servidores: number
  }

  export type PostoCountOutputTypeSelect = {
    servidores?: boolean
  }

  export type PostoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PostoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PostoCountOutputType
    : S extends undefined
    ? never
    : S extends PostoCountOutputTypeArgs
    ?'include' extends U
    ? PostoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PostoCountOutputType ?PostoCountOutputType [P]
  : 
     never
  } 
    : PostoCountOutputType
  : PostoCountOutputType




  // Custom InputTypes

  /**
   * PostoCountOutputType without action
   */
  export type PostoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PostoCountOutputType
     * 
    **/
    select?: PostoCountOutputTypeSelect | null
  }



  /**
   * Count Type ServidorCountOutputType
   */


  export type ServidorCountOutputType = {
    frequencia: number
    Posto: number
  }

  export type ServidorCountOutputTypeSelect = {
    frequencia?: boolean
    Posto?: boolean
  }

  export type ServidorCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ServidorCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ServidorCountOutputType
    : S extends undefined
    ? never
    : S extends ServidorCountOutputTypeArgs
    ?'include' extends U
    ? ServidorCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ServidorCountOutputType ?ServidorCountOutputType [P]
  : 
     never
  } 
    : ServidorCountOutputType
  : ServidorCountOutputType




  // Custom InputTypes

  /**
   * ServidorCountOutputType without action
   */
  export type ServidorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ServidorCountOutputType
     * 
    **/
    select?: ServidorCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Posto
   */


  export type AggregatePosto = {
    _count: PostoCountAggregateOutputType | null
    _min: PostoMinAggregateOutputType | null
    _max: PostoMaxAggregateOutputType | null
  }

  export type PostoMinAggregateOutputType = {
    id: string | null
    email: string | null
    nome: string | null
    telefone: string | null
    telefone2: string | null
    telefone3: string | null
    tipoPosto: TipoPosto | null
  }

  export type PostoMaxAggregateOutputType = {
    id: string | null
    email: string | null
    nome: string | null
    telefone: string | null
    telefone2: string | null
    telefone3: string | null
    tipoPosto: TipoPosto | null
  }

  export type PostoCountAggregateOutputType = {
    id: number
    email: number
    nome: number
    telefone: number
    telefone2: number
    telefone3: number
    tipoPosto: number
    _all: number
  }


  export type PostoMinAggregateInputType = {
    id?: true
    email?: true
    nome?: true
    telefone?: true
    telefone2?: true
    telefone3?: true
    tipoPosto?: true
  }

  export type PostoMaxAggregateInputType = {
    id?: true
    email?: true
    nome?: true
    telefone?: true
    telefone2?: true
    telefone3?: true
    tipoPosto?: true
  }

  export type PostoCountAggregateInputType = {
    id?: true
    email?: true
    nome?: true
    telefone?: true
    telefone2?: true
    telefone3?: true
    tipoPosto?: true
    _all?: true
  }

  export type PostoAggregateArgs = {
    /**
     * Filter which Posto to aggregate.
     * 
    **/
    where?: PostoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postos to fetch.
     * 
    **/
    orderBy?: Enumerable<PostoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PostoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Postos
    **/
    _count?: true | PostoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostoMaxAggregateInputType
  }

  export type GetPostoAggregateType<T extends PostoAggregateArgs> = {
        [P in keyof T & keyof AggregatePosto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosto[P]>
      : GetScalarType<T[P], AggregatePosto[P]>
  }




  export type PostoGroupByArgs = {
    where?: PostoWhereInput
    orderBy?: Enumerable<PostoOrderByWithAggregationInput>
    by: Array<PostoScalarFieldEnum>
    having?: PostoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostoCountAggregateInputType | true
    _min?: PostoMinAggregateInputType
    _max?: PostoMaxAggregateInputType
  }


  export type PostoGroupByOutputType = {
    id: string
    email: string
    nome: string | null
    telefone: string | null
    telefone2: string | null
    telefone3: string | null
    tipoPosto: TipoPosto
    _count: PostoCountAggregateOutputType | null
    _min: PostoMinAggregateOutputType | null
    _max: PostoMaxAggregateOutputType | null
  }

  type GetPostoGroupByPayload<T extends PostoGroupByArgs> = Promise<
    Array<
      PickArray<PostoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostoGroupByOutputType[P]>
            : GetScalarType<T[P], PostoGroupByOutputType[P]>
        }
      >
    >


  export type PostoSelect = {
    id?: boolean
    email?: boolean
    nome?: boolean
    telefone?: boolean
    telefone2?: boolean
    telefone3?: boolean
    tipoPosto?: boolean
    servidores?: boolean | ServidorFindManyArgs
    profile?: boolean | ProfileArgs
    _count?: boolean | PostoCountOutputTypeArgs
  }

  export type PostoInclude = {
    servidores?: boolean | ServidorFindManyArgs
    profile?: boolean | ProfileArgs
    _count?: boolean | PostoCountOutputTypeArgs
  }

  export type PostoGetPayload<
    S extends boolean | null | undefined | PostoArgs,
    U = keyof S
      > = S extends true
        ? Posto
    : S extends undefined
    ? never
    : S extends PostoArgs | PostoFindManyArgs
    ?'include' extends U
    ? Posto  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'servidores'
        ? Array < ServidorGetPayload<S['include'][P]>>  :
        P extends 'profile'
        ? ProfileGetPayload<S['include'][P]> | null :
        P extends '_count'
        ? PostoCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Posto ?Posto [P]
  : 
          P extends 'servidores'
        ? Array < ServidorGetPayload<S['select'][P]>>  :
        P extends 'profile'
        ? ProfileGetPayload<S['select'][P]> | null :
        P extends '_count'
        ? PostoCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Posto
  : Posto


  type PostoCountArgs = Merge<
    Omit<PostoFindManyArgs, 'select' | 'include'> & {
      select?: PostoCountAggregateInputType | true
    }
  >

  export interface PostoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Posto that matches the filter.
     * @param {PostoFindUniqueArgs} args - Arguments to find a Posto
     * @example
     * // Get one Posto
     * const posto = await prisma.posto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Posto'> extends True ? CheckSelect<T, Prisma__PostoClient<Posto>, Prisma__PostoClient<PostoGetPayload<T>>> : CheckSelect<T, Prisma__PostoClient<Posto | null >, Prisma__PostoClient<PostoGetPayload<T> | null >>

    /**
     * Find the first Posto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostoFindFirstArgs} args - Arguments to find a Posto
     * @example
     * // Get one Posto
     * const posto = await prisma.posto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Posto'> extends True ? CheckSelect<T, Prisma__PostoClient<Posto>, Prisma__PostoClient<PostoGetPayload<T>>> : CheckSelect<T, Prisma__PostoClient<Posto | null >, Prisma__PostoClient<PostoGetPayload<T> | null >>

    /**
     * Find zero or more Postos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Postos
     * const postos = await prisma.posto.findMany()
     * 
     * // Get first 10 Postos
     * const postos = await prisma.posto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postoWithIdOnly = await prisma.posto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostoFindManyArgs>(
      args?: SelectSubset<T, PostoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Posto>>, PrismaPromise<Array<PostoGetPayload<T>>>>

    /**
     * Create a Posto.
     * @param {PostoCreateArgs} args - Arguments to create a Posto.
     * @example
     * // Create one Posto
     * const Posto = await prisma.posto.create({
     *   data: {
     *     // ... data to create a Posto
     *   }
     * })
     * 
    **/
    create<T extends PostoCreateArgs>(
      args: SelectSubset<T, PostoCreateArgs>
    ): CheckSelect<T, Prisma__PostoClient<Posto>, Prisma__PostoClient<PostoGetPayload<T>>>

    /**
     * Create many Postos.
     *     @param {PostoCreateManyArgs} args - Arguments to create many Postos.
     *     @example
     *     // Create many Postos
     *     const posto = await prisma.posto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostoCreateManyArgs>(
      args?: SelectSubset<T, PostoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Posto.
     * @param {PostoDeleteArgs} args - Arguments to delete one Posto.
     * @example
     * // Delete one Posto
     * const Posto = await prisma.posto.delete({
     *   where: {
     *     // ... filter to delete one Posto
     *   }
     * })
     * 
    **/
    delete<T extends PostoDeleteArgs>(
      args: SelectSubset<T, PostoDeleteArgs>
    ): CheckSelect<T, Prisma__PostoClient<Posto>, Prisma__PostoClient<PostoGetPayload<T>>>

    /**
     * Update one Posto.
     * @param {PostoUpdateArgs} args - Arguments to update one Posto.
     * @example
     * // Update one Posto
     * const posto = await prisma.posto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostoUpdateArgs>(
      args: SelectSubset<T, PostoUpdateArgs>
    ): CheckSelect<T, Prisma__PostoClient<Posto>, Prisma__PostoClient<PostoGetPayload<T>>>

    /**
     * Delete zero or more Postos.
     * @param {PostoDeleteManyArgs} args - Arguments to filter Postos to delete.
     * @example
     * // Delete a few Postos
     * const { count } = await prisma.posto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostoDeleteManyArgs>(
      args?: SelectSubset<T, PostoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Postos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Postos
     * const posto = await prisma.posto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostoUpdateManyArgs>(
      args: SelectSubset<T, PostoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Posto.
     * @param {PostoUpsertArgs} args - Arguments to update or create a Posto.
     * @example
     * // Update or create a Posto
     * const posto = await prisma.posto.upsert({
     *   create: {
     *     // ... data to create a Posto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Posto we want to update
     *   }
     * })
    **/
    upsert<T extends PostoUpsertArgs>(
      args: SelectSubset<T, PostoUpsertArgs>
    ): CheckSelect<T, Prisma__PostoClient<Posto>, Prisma__PostoClient<PostoGetPayload<T>>>

    /**
     * Count the number of Postos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostoCountArgs} args - Arguments to filter Postos to count.
     * @example
     * // Count the number of Postos
     * const count = await prisma.posto.count({
     *   where: {
     *     // ... the filter for the Postos we want to count
     *   }
     * })
    **/
    count<T extends PostoCountArgs>(
      args?: Subset<T, PostoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Posto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostoAggregateArgs>(args: Subset<T, PostoAggregateArgs>): PrismaPromise<GetPostoAggregateType<T>>

    /**
     * Group by Posto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostoGroupByArgs['orderBy'] }
        : { orderBy?: PostoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostoGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Posto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    servidores<T extends ServidorFindManyArgs = {}>(args?: Subset<T, ServidorFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Servidor>>, PrismaPromise<Array<ServidorGetPayload<T>>>>;

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Posto findUnique
   */
  export type PostoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
    /**
     * Throw an Error if a Posto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Posto to fetch.
     * 
    **/
    where: PostoWhereUniqueInput
  }


  /**
   * Posto findFirst
   */
  export type PostoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
    /**
     * Throw an Error if a Posto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Posto to fetch.
     * 
    **/
    where?: PostoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postos to fetch.
     * 
    **/
    orderBy?: Enumerable<PostoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Postos.
     * 
    **/
    cursor?: PostoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Postos.
     * 
    **/
    distinct?: Enumerable<PostoScalarFieldEnum>
  }


  /**
   * Posto findMany
   */
  export type PostoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
    /**
     * Filter, which Postos to fetch.
     * 
    **/
    where?: PostoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postos to fetch.
     * 
    **/
    orderBy?: Enumerable<PostoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Postos.
     * 
    **/
    cursor?: PostoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostoScalarFieldEnum>
  }


  /**
   * Posto create
   */
  export type PostoCreateArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
    /**
     * The data needed to create a Posto.
     * 
    **/
    data: XOR<PostoCreateInput, PostoUncheckedCreateInput>
  }


  /**
   * Posto createMany
   */
  export type PostoCreateManyArgs = {
    data: Enumerable<PostoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Posto update
   */
  export type PostoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
    /**
     * The data needed to update a Posto.
     * 
    **/
    data: XOR<PostoUpdateInput, PostoUncheckedUpdateInput>
    /**
     * Choose, which Posto to update.
     * 
    **/
    where: PostoWhereUniqueInput
  }


  /**
   * Posto updateMany
   */
  export type PostoUpdateManyArgs = {
    data: XOR<PostoUpdateManyMutationInput, PostoUncheckedUpdateManyInput>
    where?: PostoWhereInput
  }


  /**
   * Posto upsert
   */
  export type PostoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
    /**
     * The filter to search for the Posto to update in case it exists.
     * 
    **/
    where: PostoWhereUniqueInput
    /**
     * In case the Posto found by the `where` argument doesn't exist, create a new Posto with this data.
     * 
    **/
    create: XOR<PostoCreateInput, PostoUncheckedCreateInput>
    /**
     * In case the Posto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PostoUpdateInput, PostoUncheckedUpdateInput>
  }


  /**
   * Posto delete
   */
  export type PostoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
    /**
     * Filter which Posto to delete.
     * 
    **/
    where: PostoWhereUniqueInput
  }


  /**
   * Posto deleteMany
   */
  export type PostoDeleteManyArgs = {
    where?: PostoWhereInput
  }


  /**
   * Posto without action
   */
  export type PostoArgs = {
    /**
     * Select specific fields to fetch from the Posto
     * 
    **/
    select?: PostoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostoInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    postoId: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    postoId: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    postoId: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    postoId?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    postoId?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    postoId?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: string
    postoId: string
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Promise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    posto?: boolean | PostoArgs
    postoId?: boolean
  }

  export type ProfileInclude = {
    posto?: boolean | PostoArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'posto'
        ? PostoGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Profile ?Profile [P]
  : 
          P extends 'posto'
        ? PostoGetPayload<S['select'][P]> : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    posto<T extends PostoArgs = {}>(args?: Subset<T, PostoArgs>): CheckSelect<T, Prisma__PostoClient<Posto | null >, Prisma__PostoClient<PostoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     * 
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     * 
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     * 
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     * 
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model Servidor
   */


  export type AggregateServidor = {
    _count: ServidorCountAggregateOutputType | null
    _min: ServidorMinAggregateOutputType | null
    _max: ServidorMaxAggregateOutputType | null
  }

  export type ServidorMinAggregateOutputType = {
    id: string | null
    nome: string | null
    telefone: string | null
    matricula: string | null
    rg: string | null
    endereco: string | null
    cargo: string | null
    data_de_nascimento: string | null
    tipoDoServidor: TipoServidor | null
  }

  export type ServidorMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    telefone: string | null
    matricula: string | null
    rg: string | null
    endereco: string | null
    cargo: string | null
    data_de_nascimento: string | null
    tipoDoServidor: TipoServidor | null
  }

  export type ServidorCountAggregateOutputType = {
    id: number
    nome: number
    telefone: number
    matricula: number
    rg: number
    endereco: number
    cargo: number
    data_de_nascimento: number
    tipoDoServidor: number
    _all: number
  }


  export type ServidorMinAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    matricula?: true
    rg?: true
    endereco?: true
    cargo?: true
    data_de_nascimento?: true
    tipoDoServidor?: true
  }

  export type ServidorMaxAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    matricula?: true
    rg?: true
    endereco?: true
    cargo?: true
    data_de_nascimento?: true
    tipoDoServidor?: true
  }

  export type ServidorCountAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    matricula?: true
    rg?: true
    endereco?: true
    cargo?: true
    data_de_nascimento?: true
    tipoDoServidor?: true
    _all?: true
  }

  export type ServidorAggregateArgs = {
    /**
     * Filter which Servidor to aggregate.
     * 
    **/
    where?: ServidorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servidors to fetch.
     * 
    **/
    orderBy?: Enumerable<ServidorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ServidorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servidors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servidors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servidors
    **/
    _count?: true | ServidorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServidorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServidorMaxAggregateInputType
  }

  export type GetServidorAggregateType<T extends ServidorAggregateArgs> = {
        [P in keyof T & keyof AggregateServidor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServidor[P]>
      : GetScalarType<T[P], AggregateServidor[P]>
  }




  export type ServidorGroupByArgs = {
    where?: ServidorWhereInput
    orderBy?: Enumerable<ServidorOrderByWithAggregationInput>
    by: Array<ServidorScalarFieldEnum>
    having?: ServidorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServidorCountAggregateInputType | true
    _min?: ServidorMinAggregateInputType
    _max?: ServidorMaxAggregateInputType
  }


  export type ServidorGroupByOutputType = {
    id: string
    nome: string
    telefone: string | null
    matricula: string
    rg: string | null
    endereco: string | null
    cargo: string | null
    data_de_nascimento: string | null
    tipoDoServidor: TipoServidor
    _count: ServidorCountAggregateOutputType | null
    _min: ServidorMinAggregateOutputType | null
    _max: ServidorMaxAggregateOutputType | null
  }

  type GetServidorGroupByPayload<T extends ServidorGroupByArgs> = Promise<
    Array<
      PickArray<ServidorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServidorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServidorGroupByOutputType[P]>
            : GetScalarType<T[P], ServidorGroupByOutputType[P]>
        }
      >
    >


  export type ServidorSelect = {
    id?: boolean
    nome?: boolean
    telefone?: boolean
    matricula?: boolean
    rg?: boolean
    endereco?: boolean
    cargo?: boolean
    data_de_nascimento?: boolean
    frequencia?: boolean | FrequenciaFindManyArgs
    tipoDoServidor?: boolean
    Posto?: boolean | PostoFindManyArgs
    _count?: boolean | ServidorCountOutputTypeArgs
  }

  export type ServidorInclude = {
    frequencia?: boolean | FrequenciaFindManyArgs
    Posto?: boolean | PostoFindManyArgs
    _count?: boolean | ServidorCountOutputTypeArgs
  }

  export type ServidorGetPayload<
    S extends boolean | null | undefined | ServidorArgs,
    U = keyof S
      > = S extends true
        ? Servidor
    : S extends undefined
    ? never
    : S extends ServidorArgs | ServidorFindManyArgs
    ?'include' extends U
    ? Servidor  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'frequencia'
        ? Array < FrequenciaGetPayload<S['include'][P]>>  :
        P extends 'Posto'
        ? Array < PostoGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ServidorCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Servidor ?Servidor [P]
  : 
          P extends 'frequencia'
        ? Array < FrequenciaGetPayload<S['select'][P]>>  :
        P extends 'Posto'
        ? Array < PostoGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ServidorCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Servidor
  : Servidor


  type ServidorCountArgs = Merge<
    Omit<ServidorFindManyArgs, 'select' | 'include'> & {
      select?: ServidorCountAggregateInputType | true
    }
  >

  export interface ServidorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Servidor that matches the filter.
     * @param {ServidorFindUniqueArgs} args - Arguments to find a Servidor
     * @example
     * // Get one Servidor
     * const servidor = await prisma.servidor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServidorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ServidorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Servidor'> extends True ? CheckSelect<T, Prisma__ServidorClient<Servidor>, Prisma__ServidorClient<ServidorGetPayload<T>>> : CheckSelect<T, Prisma__ServidorClient<Servidor | null >, Prisma__ServidorClient<ServidorGetPayload<T> | null >>

    /**
     * Find the first Servidor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServidorFindFirstArgs} args - Arguments to find a Servidor
     * @example
     * // Get one Servidor
     * const servidor = await prisma.servidor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServidorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ServidorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Servidor'> extends True ? CheckSelect<T, Prisma__ServidorClient<Servidor>, Prisma__ServidorClient<ServidorGetPayload<T>>> : CheckSelect<T, Prisma__ServidorClient<Servidor | null >, Prisma__ServidorClient<ServidorGetPayload<T> | null >>

    /**
     * Find zero or more Servidors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServidorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servidors
     * const servidors = await prisma.servidor.findMany()
     * 
     * // Get first 10 Servidors
     * const servidors = await prisma.servidor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servidorWithIdOnly = await prisma.servidor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServidorFindManyArgs>(
      args?: SelectSubset<T, ServidorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Servidor>>, PrismaPromise<Array<ServidorGetPayload<T>>>>

    /**
     * Create a Servidor.
     * @param {ServidorCreateArgs} args - Arguments to create a Servidor.
     * @example
     * // Create one Servidor
     * const Servidor = await prisma.servidor.create({
     *   data: {
     *     // ... data to create a Servidor
     *   }
     * })
     * 
    **/
    create<T extends ServidorCreateArgs>(
      args: SelectSubset<T, ServidorCreateArgs>
    ): CheckSelect<T, Prisma__ServidorClient<Servidor>, Prisma__ServidorClient<ServidorGetPayload<T>>>

    /**
     * Create many Servidors.
     *     @param {ServidorCreateManyArgs} args - Arguments to create many Servidors.
     *     @example
     *     // Create many Servidors
     *     const servidor = await prisma.servidor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServidorCreateManyArgs>(
      args?: SelectSubset<T, ServidorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Servidor.
     * @param {ServidorDeleteArgs} args - Arguments to delete one Servidor.
     * @example
     * // Delete one Servidor
     * const Servidor = await prisma.servidor.delete({
     *   where: {
     *     // ... filter to delete one Servidor
     *   }
     * })
     * 
    **/
    delete<T extends ServidorDeleteArgs>(
      args: SelectSubset<T, ServidorDeleteArgs>
    ): CheckSelect<T, Prisma__ServidorClient<Servidor>, Prisma__ServidorClient<ServidorGetPayload<T>>>

    /**
     * Update one Servidor.
     * @param {ServidorUpdateArgs} args - Arguments to update one Servidor.
     * @example
     * // Update one Servidor
     * const servidor = await prisma.servidor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServidorUpdateArgs>(
      args: SelectSubset<T, ServidorUpdateArgs>
    ): CheckSelect<T, Prisma__ServidorClient<Servidor>, Prisma__ServidorClient<ServidorGetPayload<T>>>

    /**
     * Delete zero or more Servidors.
     * @param {ServidorDeleteManyArgs} args - Arguments to filter Servidors to delete.
     * @example
     * // Delete a few Servidors
     * const { count } = await prisma.servidor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServidorDeleteManyArgs>(
      args?: SelectSubset<T, ServidorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servidors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServidorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servidors
     * const servidor = await prisma.servidor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServidorUpdateManyArgs>(
      args: SelectSubset<T, ServidorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Servidor.
     * @param {ServidorUpsertArgs} args - Arguments to update or create a Servidor.
     * @example
     * // Update or create a Servidor
     * const servidor = await prisma.servidor.upsert({
     *   create: {
     *     // ... data to create a Servidor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servidor we want to update
     *   }
     * })
    **/
    upsert<T extends ServidorUpsertArgs>(
      args: SelectSubset<T, ServidorUpsertArgs>
    ): CheckSelect<T, Prisma__ServidorClient<Servidor>, Prisma__ServidorClient<ServidorGetPayload<T>>>

    /**
     * Count the number of Servidors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServidorCountArgs} args - Arguments to filter Servidors to count.
     * @example
     * // Count the number of Servidors
     * const count = await prisma.servidor.count({
     *   where: {
     *     // ... the filter for the Servidors we want to count
     *   }
     * })
    **/
    count<T extends ServidorCountArgs>(
      args?: Subset<T, ServidorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServidorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servidor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServidorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServidorAggregateArgs>(args: Subset<T, ServidorAggregateArgs>): PrismaPromise<GetServidorAggregateType<T>>

    /**
     * Group by Servidor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServidorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServidorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServidorGroupByArgs['orderBy'] }
        : { orderBy?: ServidorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServidorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServidorGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servidor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ServidorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    frequencia<T extends FrequenciaFindManyArgs = {}>(args?: Subset<T, FrequenciaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Frequencia>>, PrismaPromise<Array<FrequenciaGetPayload<T>>>>;

    Posto<T extends PostoFindManyArgs = {}>(args?: Subset<T, PostoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Posto>>, PrismaPromise<Array<PostoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Servidor findUnique
   */
  export type ServidorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
    /**
     * Throw an Error if a Servidor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Servidor to fetch.
     * 
    **/
    where: ServidorWhereUniqueInput
  }


  /**
   * Servidor findFirst
   */
  export type ServidorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
    /**
     * Throw an Error if a Servidor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Servidor to fetch.
     * 
    **/
    where?: ServidorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servidors to fetch.
     * 
    **/
    orderBy?: Enumerable<ServidorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servidors.
     * 
    **/
    cursor?: ServidorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servidors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servidors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servidors.
     * 
    **/
    distinct?: Enumerable<ServidorScalarFieldEnum>
  }


  /**
   * Servidor findMany
   */
  export type ServidorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
    /**
     * Filter, which Servidors to fetch.
     * 
    **/
    where?: ServidorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servidors to fetch.
     * 
    **/
    orderBy?: Enumerable<ServidorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servidors.
     * 
    **/
    cursor?: ServidorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servidors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servidors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ServidorScalarFieldEnum>
  }


  /**
   * Servidor create
   */
  export type ServidorCreateArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
    /**
     * The data needed to create a Servidor.
     * 
    **/
    data: XOR<ServidorCreateInput, ServidorUncheckedCreateInput>
  }


  /**
   * Servidor createMany
   */
  export type ServidorCreateManyArgs = {
    data: Enumerable<ServidorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Servidor update
   */
  export type ServidorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
    /**
     * The data needed to update a Servidor.
     * 
    **/
    data: XOR<ServidorUpdateInput, ServidorUncheckedUpdateInput>
    /**
     * Choose, which Servidor to update.
     * 
    **/
    where: ServidorWhereUniqueInput
  }


  /**
   * Servidor updateMany
   */
  export type ServidorUpdateManyArgs = {
    data: XOR<ServidorUpdateManyMutationInput, ServidorUncheckedUpdateManyInput>
    where?: ServidorWhereInput
  }


  /**
   * Servidor upsert
   */
  export type ServidorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
    /**
     * The filter to search for the Servidor to update in case it exists.
     * 
    **/
    where: ServidorWhereUniqueInput
    /**
     * In case the Servidor found by the `where` argument doesn't exist, create a new Servidor with this data.
     * 
    **/
    create: XOR<ServidorCreateInput, ServidorUncheckedCreateInput>
    /**
     * In case the Servidor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ServidorUpdateInput, ServidorUncheckedUpdateInput>
  }


  /**
   * Servidor delete
   */
  export type ServidorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
    /**
     * Filter which Servidor to delete.
     * 
    **/
    where: ServidorWhereUniqueInput
  }


  /**
   * Servidor deleteMany
   */
  export type ServidorDeleteManyArgs = {
    where?: ServidorWhereInput
  }


  /**
   * Servidor without action
   */
  export type ServidorArgs = {
    /**
     * Select specific fields to fetch from the Servidor
     * 
    **/
    select?: ServidorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServidorInclude | null
  }



  /**
   * Model Frequencia
   */


  export type AggregateFrequencia = {
    _count: FrequenciaCountAggregateOutputType | null
    _avg: FrequenciaAvgAggregateOutputType | null
    _sum: FrequenciaSumAggregateOutputType | null
    _min: FrequenciaMinAggregateOutputType | null
    _max: FrequenciaMaxAggregateOutputType | null
  }

  export type FrequenciaAvgAggregateOutputType = {
    id: number | null
  }

  export type FrequenciaSumAggregateOutputType = {
    id: number | null
  }

  export type FrequenciaMinAggregateOutputType = {
    id: number | null
    janeiro: string | null
    fevereiro: string | null
    marco: string | null
    abril: string | null
    maio: string | null
    junho: string | null
    julho: string | null
    agosto: string | null
    setembro: string | null
    outubro: string | null
    novembro: string | null
    dezembro: string | null
    servidorId: string | null
  }

  export type FrequenciaMaxAggregateOutputType = {
    id: number | null
    janeiro: string | null
    fevereiro: string | null
    marco: string | null
    abril: string | null
    maio: string | null
    junho: string | null
    julho: string | null
    agosto: string | null
    setembro: string | null
    outubro: string | null
    novembro: string | null
    dezembro: string | null
    servidorId: string | null
  }

  export type FrequenciaCountAggregateOutputType = {
    id: number
    janeiro: number
    fevereiro: number
    marco: number
    abril: number
    maio: number
    junho: number
    julho: number
    agosto: number
    setembro: number
    outubro: number
    novembro: number
    dezembro: number
    servidorId: number
    _all: number
  }


  export type FrequenciaAvgAggregateInputType = {
    id?: true
  }

  export type FrequenciaSumAggregateInputType = {
    id?: true
  }

  export type FrequenciaMinAggregateInputType = {
    id?: true
    janeiro?: true
    fevereiro?: true
    marco?: true
    abril?: true
    maio?: true
    junho?: true
    julho?: true
    agosto?: true
    setembro?: true
    outubro?: true
    novembro?: true
    dezembro?: true
    servidorId?: true
  }

  export type FrequenciaMaxAggregateInputType = {
    id?: true
    janeiro?: true
    fevereiro?: true
    marco?: true
    abril?: true
    maio?: true
    junho?: true
    julho?: true
    agosto?: true
    setembro?: true
    outubro?: true
    novembro?: true
    dezembro?: true
    servidorId?: true
  }

  export type FrequenciaCountAggregateInputType = {
    id?: true
    janeiro?: true
    fevereiro?: true
    marco?: true
    abril?: true
    maio?: true
    junho?: true
    julho?: true
    agosto?: true
    setembro?: true
    outubro?: true
    novembro?: true
    dezembro?: true
    servidorId?: true
    _all?: true
  }

  export type FrequenciaAggregateArgs = {
    /**
     * Filter which Frequencia to aggregate.
     * 
    **/
    where?: FrequenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frequencias to fetch.
     * 
    **/
    orderBy?: Enumerable<FrequenciaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FrequenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frequencias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frequencias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Frequencias
    **/
    _count?: true | FrequenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrequenciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrequenciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrequenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrequenciaMaxAggregateInputType
  }

  export type GetFrequenciaAggregateType<T extends FrequenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateFrequencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrequencia[P]>
      : GetScalarType<T[P], AggregateFrequencia[P]>
  }




  export type FrequenciaGroupByArgs = {
    where?: FrequenciaWhereInput
    orderBy?: Enumerable<FrequenciaOrderByWithAggregationInput>
    by: Array<FrequenciaScalarFieldEnum>
    having?: FrequenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrequenciaCountAggregateInputType | true
    _avg?: FrequenciaAvgAggregateInputType
    _sum?: FrequenciaSumAggregateInputType
    _min?: FrequenciaMinAggregateInputType
    _max?: FrequenciaMaxAggregateInputType
  }


  export type FrequenciaGroupByOutputType = {
    id: number
    janeiro: string | null
    fevereiro: string | null
    marco: string | null
    abril: string | null
    maio: string | null
    junho: string | null
    julho: string | null
    agosto: string | null
    setembro: string | null
    outubro: string | null
    novembro: string | null
    dezembro: string | null
    servidorId: string | null
    _count: FrequenciaCountAggregateOutputType | null
    _avg: FrequenciaAvgAggregateOutputType | null
    _sum: FrequenciaSumAggregateOutputType | null
    _min: FrequenciaMinAggregateOutputType | null
    _max: FrequenciaMaxAggregateOutputType | null
  }

  type GetFrequenciaGroupByPayload<T extends FrequenciaGroupByArgs> = Promise<
    Array<
      PickArray<FrequenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrequenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrequenciaGroupByOutputType[P]>
            : GetScalarType<T[P], FrequenciaGroupByOutputType[P]>
        }
      >
    >


  export type FrequenciaSelect = {
    id?: boolean
    janeiro?: boolean
    fevereiro?: boolean
    marco?: boolean
    abril?: boolean
    maio?: boolean
    junho?: boolean
    julho?: boolean
    agosto?: boolean
    setembro?: boolean
    outubro?: boolean
    novembro?: boolean
    dezembro?: boolean
    Servidor?: boolean | ServidorArgs
    servidorId?: boolean
  }

  export type FrequenciaInclude = {
    Servidor?: boolean | ServidorArgs
  }

  export type FrequenciaGetPayload<
    S extends boolean | null | undefined | FrequenciaArgs,
    U = keyof S
      > = S extends true
        ? Frequencia
    : S extends undefined
    ? never
    : S extends FrequenciaArgs | FrequenciaFindManyArgs
    ?'include' extends U
    ? Frequencia  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Servidor'
        ? ServidorGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Frequencia ?Frequencia [P]
  : 
          P extends 'Servidor'
        ? ServidorGetPayload<S['select'][P]> | null : never
  } 
    : Frequencia
  : Frequencia


  type FrequenciaCountArgs = Merge<
    Omit<FrequenciaFindManyArgs, 'select' | 'include'> & {
      select?: FrequenciaCountAggregateInputType | true
    }
  >

  export interface FrequenciaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Frequencia that matches the filter.
     * @param {FrequenciaFindUniqueArgs} args - Arguments to find a Frequencia
     * @example
     * // Get one Frequencia
     * const frequencia = await prisma.frequencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FrequenciaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FrequenciaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Frequencia'> extends True ? CheckSelect<T, Prisma__FrequenciaClient<Frequencia>, Prisma__FrequenciaClient<FrequenciaGetPayload<T>>> : CheckSelect<T, Prisma__FrequenciaClient<Frequencia | null >, Prisma__FrequenciaClient<FrequenciaGetPayload<T> | null >>

    /**
     * Find the first Frequencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequenciaFindFirstArgs} args - Arguments to find a Frequencia
     * @example
     * // Get one Frequencia
     * const frequencia = await prisma.frequencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FrequenciaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FrequenciaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Frequencia'> extends True ? CheckSelect<T, Prisma__FrequenciaClient<Frequencia>, Prisma__FrequenciaClient<FrequenciaGetPayload<T>>> : CheckSelect<T, Prisma__FrequenciaClient<Frequencia | null >, Prisma__FrequenciaClient<FrequenciaGetPayload<T> | null >>

    /**
     * Find zero or more Frequencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequenciaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Frequencias
     * const frequencias = await prisma.frequencia.findMany()
     * 
     * // Get first 10 Frequencias
     * const frequencias = await prisma.frequencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frequenciaWithIdOnly = await prisma.frequencia.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FrequenciaFindManyArgs>(
      args?: SelectSubset<T, FrequenciaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Frequencia>>, PrismaPromise<Array<FrequenciaGetPayload<T>>>>

    /**
     * Create a Frequencia.
     * @param {FrequenciaCreateArgs} args - Arguments to create a Frequencia.
     * @example
     * // Create one Frequencia
     * const Frequencia = await prisma.frequencia.create({
     *   data: {
     *     // ... data to create a Frequencia
     *   }
     * })
     * 
    **/
    create<T extends FrequenciaCreateArgs>(
      args: SelectSubset<T, FrequenciaCreateArgs>
    ): CheckSelect<T, Prisma__FrequenciaClient<Frequencia>, Prisma__FrequenciaClient<FrequenciaGetPayload<T>>>

    /**
     * Create many Frequencias.
     *     @param {FrequenciaCreateManyArgs} args - Arguments to create many Frequencias.
     *     @example
     *     // Create many Frequencias
     *     const frequencia = await prisma.frequencia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FrequenciaCreateManyArgs>(
      args?: SelectSubset<T, FrequenciaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Frequencia.
     * @param {FrequenciaDeleteArgs} args - Arguments to delete one Frequencia.
     * @example
     * // Delete one Frequencia
     * const Frequencia = await prisma.frequencia.delete({
     *   where: {
     *     // ... filter to delete one Frequencia
     *   }
     * })
     * 
    **/
    delete<T extends FrequenciaDeleteArgs>(
      args: SelectSubset<T, FrequenciaDeleteArgs>
    ): CheckSelect<T, Prisma__FrequenciaClient<Frequencia>, Prisma__FrequenciaClient<FrequenciaGetPayload<T>>>

    /**
     * Update one Frequencia.
     * @param {FrequenciaUpdateArgs} args - Arguments to update one Frequencia.
     * @example
     * // Update one Frequencia
     * const frequencia = await prisma.frequencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FrequenciaUpdateArgs>(
      args: SelectSubset<T, FrequenciaUpdateArgs>
    ): CheckSelect<T, Prisma__FrequenciaClient<Frequencia>, Prisma__FrequenciaClient<FrequenciaGetPayload<T>>>

    /**
     * Delete zero or more Frequencias.
     * @param {FrequenciaDeleteManyArgs} args - Arguments to filter Frequencias to delete.
     * @example
     * // Delete a few Frequencias
     * const { count } = await prisma.frequencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FrequenciaDeleteManyArgs>(
      args?: SelectSubset<T, FrequenciaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Frequencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Frequencias
     * const frequencia = await prisma.frequencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FrequenciaUpdateManyArgs>(
      args: SelectSubset<T, FrequenciaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Frequencia.
     * @param {FrequenciaUpsertArgs} args - Arguments to update or create a Frequencia.
     * @example
     * // Update or create a Frequencia
     * const frequencia = await prisma.frequencia.upsert({
     *   create: {
     *     // ... data to create a Frequencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Frequencia we want to update
     *   }
     * })
    **/
    upsert<T extends FrequenciaUpsertArgs>(
      args: SelectSubset<T, FrequenciaUpsertArgs>
    ): CheckSelect<T, Prisma__FrequenciaClient<Frequencia>, Prisma__FrequenciaClient<FrequenciaGetPayload<T>>>

    /**
     * Count the number of Frequencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequenciaCountArgs} args - Arguments to filter Frequencias to count.
     * @example
     * // Count the number of Frequencias
     * const count = await prisma.frequencia.count({
     *   where: {
     *     // ... the filter for the Frequencias we want to count
     *   }
     * })
    **/
    count<T extends FrequenciaCountArgs>(
      args?: Subset<T, FrequenciaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrequenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Frequencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrequenciaAggregateArgs>(args: Subset<T, FrequenciaAggregateArgs>): PrismaPromise<GetFrequenciaAggregateType<T>>

    /**
     * Group by Frequencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrequenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrequenciaGroupByArgs['orderBy'] }
        : { orderBy?: FrequenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrequenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrequenciaGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Frequencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FrequenciaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Servidor<T extends ServidorArgs = {}>(args?: Subset<T, ServidorArgs>): CheckSelect<T, Prisma__ServidorClient<Servidor | null >, Prisma__ServidorClient<ServidorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Frequencia findUnique
   */
  export type FrequenciaFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
    /**
     * Throw an Error if a Frequencia can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Frequencia to fetch.
     * 
    **/
    where: FrequenciaWhereUniqueInput
  }


  /**
   * Frequencia findFirst
   */
  export type FrequenciaFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
    /**
     * Throw an Error if a Frequencia can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Frequencia to fetch.
     * 
    **/
    where?: FrequenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frequencias to fetch.
     * 
    **/
    orderBy?: Enumerable<FrequenciaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Frequencias.
     * 
    **/
    cursor?: FrequenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frequencias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frequencias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Frequencias.
     * 
    **/
    distinct?: Enumerable<FrequenciaScalarFieldEnum>
  }


  /**
   * Frequencia findMany
   */
  export type FrequenciaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
    /**
     * Filter, which Frequencias to fetch.
     * 
    **/
    where?: FrequenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frequencias to fetch.
     * 
    **/
    orderBy?: Enumerable<FrequenciaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Frequencias.
     * 
    **/
    cursor?: FrequenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frequencias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frequencias.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FrequenciaScalarFieldEnum>
  }


  /**
   * Frequencia create
   */
  export type FrequenciaCreateArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
    /**
     * The data needed to create a Frequencia.
     * 
    **/
    data: XOR<FrequenciaCreateInput, FrequenciaUncheckedCreateInput>
  }


  /**
   * Frequencia createMany
   */
  export type FrequenciaCreateManyArgs = {
    data: Enumerable<FrequenciaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Frequencia update
   */
  export type FrequenciaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
    /**
     * The data needed to update a Frequencia.
     * 
    **/
    data: XOR<FrequenciaUpdateInput, FrequenciaUncheckedUpdateInput>
    /**
     * Choose, which Frequencia to update.
     * 
    **/
    where: FrequenciaWhereUniqueInput
  }


  /**
   * Frequencia updateMany
   */
  export type FrequenciaUpdateManyArgs = {
    data: XOR<FrequenciaUpdateManyMutationInput, FrequenciaUncheckedUpdateManyInput>
    where?: FrequenciaWhereInput
  }


  /**
   * Frequencia upsert
   */
  export type FrequenciaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
    /**
     * The filter to search for the Frequencia to update in case it exists.
     * 
    **/
    where: FrequenciaWhereUniqueInput
    /**
     * In case the Frequencia found by the `where` argument doesn't exist, create a new Frequencia with this data.
     * 
    **/
    create: XOR<FrequenciaCreateInput, FrequenciaUncheckedCreateInput>
    /**
     * In case the Frequencia was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FrequenciaUpdateInput, FrequenciaUncheckedUpdateInput>
  }


  /**
   * Frequencia delete
   */
  export type FrequenciaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
    /**
     * Filter which Frequencia to delete.
     * 
    **/
    where: FrequenciaWhereUniqueInput
  }


  /**
   * Frequencia deleteMany
   */
  export type FrequenciaDeleteManyArgs = {
    where?: FrequenciaWhereInput
  }


  /**
   * Frequencia without action
   */
  export type FrequenciaArgs = {
    /**
     * Select specific fields to fetch from the Frequencia
     * 
    **/
    select?: FrequenciaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FrequenciaInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const PostoScalarFieldEnum: {
    id: 'id',
    email: 'email',
    nome: 'nome',
    telefone: 'telefone',
    telefone2: 'telefone2',
    telefone3: 'telefone3',
    tipoPosto: 'tipoPosto'
  };

  export type PostoScalarFieldEnum = (typeof PostoScalarFieldEnum)[keyof typeof PostoScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    postoId: 'postoId'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ServidorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    telefone: 'telefone',
    matricula: 'matricula',
    rg: 'rg',
    endereco: 'endereco',
    cargo: 'cargo',
    data_de_nascimento: 'data_de_nascimento',
    tipoDoServidor: 'tipoDoServidor'
  };

  export type ServidorScalarFieldEnum = (typeof ServidorScalarFieldEnum)[keyof typeof ServidorScalarFieldEnum]


  export const FrequenciaScalarFieldEnum: {
    id: 'id',
    janeiro: 'janeiro',
    fevereiro: 'fevereiro',
    marco: 'marco',
    abril: 'abril',
    maio: 'maio',
    junho: 'junho',
    julho: 'julho',
    agosto: 'agosto',
    setembro: 'setembro',
    outubro: 'outubro',
    novembro: 'novembro',
    dezembro: 'dezembro',
    servidorId: 'servidorId'
  };

  export type FrequenciaScalarFieldEnum = (typeof FrequenciaScalarFieldEnum)[keyof typeof FrequenciaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type PostoWhereInput = {
    AND?: Enumerable<PostoWhereInput>
    OR?: Enumerable<PostoWhereInput>
    NOT?: Enumerable<PostoWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    nome?: StringNullableFilter | string | null
    telefone?: StringNullableFilter | string | null
    telefone2?: StringNullableFilter | string | null
    telefone3?: StringNullableFilter | string | null
    tipoPosto?: EnumTipoPostoFilter | TipoPosto
    servidores?: ServidorListRelationFilter
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
  }

  export type PostoOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    telefone2?: SortOrder
    telefone3?: SortOrder
    tipoPosto?: SortOrder
    servidores?: ServidorOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
  }

  export type PostoWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type PostoOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    telefone2?: SortOrder
    telefone3?: SortOrder
    tipoPosto?: SortOrder
    _count?: PostoCountOrderByAggregateInput
    _max?: PostoMaxOrderByAggregateInput
    _min?: PostoMinOrderByAggregateInput
  }

  export type PostoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostoScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    nome?: StringNullableWithAggregatesFilter | string | null
    telefone?: StringNullableWithAggregatesFilter | string | null
    telefone2?: StringNullableWithAggregatesFilter | string | null
    telefone3?: StringNullableWithAggregatesFilter | string | null
    tipoPosto?: EnumTipoPostoWithAggregatesFilter | TipoPosto
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: StringFilter | string
    posto?: XOR<PostoRelationFilter, PostoWhereInput>
    postoId?: StringFilter | string
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    posto?: PostoOrderByWithRelationInput
    postoId?: SortOrder
  }

  export type ProfileWhereUniqueInput = {
    id?: string
    postoId?: string
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    postoId?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    postoId?: StringWithAggregatesFilter | string
  }

  export type ServidorWhereInput = {
    AND?: Enumerable<ServidorWhereInput>
    OR?: Enumerable<ServidorWhereInput>
    NOT?: Enumerable<ServidorWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    telefone?: StringNullableFilter | string | null
    matricula?: StringFilter | string
    rg?: StringNullableFilter | string | null
    endereco?: StringNullableFilter | string | null
    cargo?: StringNullableFilter | string | null
    data_de_nascimento?: StringNullableFilter | string | null
    frequencia?: FrequenciaListRelationFilter
    tipoDoServidor?: EnumTipoServidorFilter | TipoServidor
    Posto?: PostoListRelationFilter
  }

  export type ServidorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    matricula?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    cargo?: SortOrder
    data_de_nascimento?: SortOrder
    frequencia?: FrequenciaOrderByRelationAggregateInput
    tipoDoServidor?: SortOrder
    Posto?: PostoOrderByRelationAggregateInput
  }

  export type ServidorWhereUniqueInput = {
    id?: string
  }

  export type ServidorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    matricula?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    cargo?: SortOrder
    data_de_nascimento?: SortOrder
    tipoDoServidor?: SortOrder
    _count?: ServidorCountOrderByAggregateInput
    _max?: ServidorMaxOrderByAggregateInput
    _min?: ServidorMinOrderByAggregateInput
  }

  export type ServidorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ServidorScalarWhereWithAggregatesInput>
    OR?: Enumerable<ServidorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ServidorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    telefone?: StringNullableWithAggregatesFilter | string | null
    matricula?: StringWithAggregatesFilter | string
    rg?: StringNullableWithAggregatesFilter | string | null
    endereco?: StringNullableWithAggregatesFilter | string | null
    cargo?: StringNullableWithAggregatesFilter | string | null
    data_de_nascimento?: StringNullableWithAggregatesFilter | string | null
    tipoDoServidor?: EnumTipoServidorWithAggregatesFilter | TipoServidor
  }

  export type FrequenciaWhereInput = {
    AND?: Enumerable<FrequenciaWhereInput>
    OR?: Enumerable<FrequenciaWhereInput>
    NOT?: Enumerable<FrequenciaWhereInput>
    id?: IntFilter | number
    janeiro?: StringNullableFilter | string | null
    fevereiro?: StringNullableFilter | string | null
    marco?: StringNullableFilter | string | null
    abril?: StringNullableFilter | string | null
    maio?: StringNullableFilter | string | null
    junho?: StringNullableFilter | string | null
    julho?: StringNullableFilter | string | null
    agosto?: StringNullableFilter | string | null
    setembro?: StringNullableFilter | string | null
    outubro?: StringNullableFilter | string | null
    novembro?: StringNullableFilter | string | null
    dezembro?: StringNullableFilter | string | null
    Servidor?: XOR<ServidorRelationFilter, ServidorWhereInput> | null
    servidorId?: StringNullableFilter | string | null
  }

  export type FrequenciaOrderByWithRelationInput = {
    id?: SortOrder
    janeiro?: SortOrder
    fevereiro?: SortOrder
    marco?: SortOrder
    abril?: SortOrder
    maio?: SortOrder
    junho?: SortOrder
    julho?: SortOrder
    agosto?: SortOrder
    setembro?: SortOrder
    outubro?: SortOrder
    novembro?: SortOrder
    dezembro?: SortOrder
    Servidor?: ServidorOrderByWithRelationInput
    servidorId?: SortOrder
  }

  export type FrequenciaWhereUniqueInput = {
    id?: number
  }

  export type FrequenciaOrderByWithAggregationInput = {
    id?: SortOrder
    janeiro?: SortOrder
    fevereiro?: SortOrder
    marco?: SortOrder
    abril?: SortOrder
    maio?: SortOrder
    junho?: SortOrder
    julho?: SortOrder
    agosto?: SortOrder
    setembro?: SortOrder
    outubro?: SortOrder
    novembro?: SortOrder
    dezembro?: SortOrder
    servidorId?: SortOrder
    _count?: FrequenciaCountOrderByAggregateInput
    _avg?: FrequenciaAvgOrderByAggregateInput
    _max?: FrequenciaMaxOrderByAggregateInput
    _min?: FrequenciaMinOrderByAggregateInput
    _sum?: FrequenciaSumOrderByAggregateInput
  }

  export type FrequenciaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FrequenciaScalarWhereWithAggregatesInput>
    OR?: Enumerable<FrequenciaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FrequenciaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    janeiro?: StringNullableWithAggregatesFilter | string | null
    fevereiro?: StringNullableWithAggregatesFilter | string | null
    marco?: StringNullableWithAggregatesFilter | string | null
    abril?: StringNullableWithAggregatesFilter | string | null
    maio?: StringNullableWithAggregatesFilter | string | null
    junho?: StringNullableWithAggregatesFilter | string | null
    julho?: StringNullableWithAggregatesFilter | string | null
    agosto?: StringNullableWithAggregatesFilter | string | null
    setembro?: StringNullableWithAggregatesFilter | string | null
    outubro?: StringNullableWithAggregatesFilter | string | null
    novembro?: StringNullableWithAggregatesFilter | string | null
    dezembro?: StringNullableWithAggregatesFilter | string | null
    servidorId?: StringNullableWithAggregatesFilter | string | null
  }

  export type PostoCreateInput = {
    id?: string
    email: string
    nome?: string | null
    telefone?: string | null
    telefone2?: string | null
    telefone3?: string | null
    tipoPosto?: TipoPosto
    servidores?: ServidorCreateNestedManyWithoutPostoInput
    profile?: ProfileCreateNestedOneWithoutPostoInput
  }

  export type PostoUncheckedCreateInput = {
    id?: string
    email: string
    nome?: string | null
    telefone?: string | null
    telefone2?: string | null
    telefone3?: string | null
    tipoPosto?: TipoPosto
    profile?: ProfileUncheckedCreateNestedOneWithoutPostoInput
  }

  export type PostoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
    servidores?: ServidorUpdateManyWithoutPostoInput
    profile?: ProfileUpdateOneWithoutPostoInput
  }

  export type PostoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
    profile?: ProfileUncheckedUpdateOneWithoutPostoInput
  }

  export type PostoCreateManyInput = {
    id?: string
    email: string
    nome?: string | null
    telefone?: string | null
    telefone2?: string | null
    telefone3?: string | null
    tipoPosto?: TipoPosto
  }

  export type PostoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
  }

  export type PostoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
  }

  export type ProfileCreateInput = {
    id?: string
    posto: PostoCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    postoId: string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    posto?: PostoUpdateOneRequiredWithoutProfileInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postoId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    postoId: string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postoId?: StringFieldUpdateOperationsInput | string
  }

  export type ServidorCreateInput = {
    id?: string
    nome: string
    telefone?: string | null
    matricula: string
    rg?: string | null
    endereco?: string | null
    cargo?: string | null
    data_de_nascimento?: string | null
    tipoDoServidor?: TipoServidor
    frequencia?: FrequenciaCreateNestedManyWithoutServidorInput
    Posto?: PostoCreateNestedManyWithoutServidoresInput
  }

  export type ServidorUncheckedCreateInput = {
    id?: string
    nome: string
    telefone?: string | null
    matricula: string
    rg?: string | null
    endereco?: string | null
    cargo?: string | null
    data_de_nascimento?: string | null
    tipoDoServidor?: TipoServidor
    frequencia?: FrequenciaUncheckedCreateNestedManyWithoutServidorInput
  }

  export type ServidorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
    frequencia?: FrequenciaUpdateManyWithoutServidorInput
    Posto?: PostoUpdateManyWithoutServidoresInput
  }

  export type ServidorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
    frequencia?: FrequenciaUncheckedUpdateManyWithoutServidorInput
  }

  export type ServidorCreateManyInput = {
    id?: string
    nome: string
    telefone?: string | null
    matricula: string
    rg?: string | null
    endereco?: string | null
    cargo?: string | null
    data_de_nascimento?: string | null
    tipoDoServidor?: TipoServidor
  }

  export type ServidorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
  }

  export type ServidorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
  }

  export type FrequenciaCreateInput = {
    janeiro?: string | null
    fevereiro?: string | null
    marco?: string | null
    abril?: string | null
    maio?: string | null
    junho?: string | null
    julho?: string | null
    agosto?: string | null
    setembro?: string | null
    outubro?: string | null
    novembro?: string | null
    dezembro?: string | null
    Servidor?: ServidorCreateNestedOneWithoutFrequenciaInput
  }

  export type FrequenciaUncheckedCreateInput = {
    id?: number
    janeiro?: string | null
    fevereiro?: string | null
    marco?: string | null
    abril?: string | null
    maio?: string | null
    junho?: string | null
    julho?: string | null
    agosto?: string | null
    setembro?: string | null
    outubro?: string | null
    novembro?: string | null
    dezembro?: string | null
    servidorId?: string | null
  }

  export type FrequenciaUpdateInput = {
    janeiro?: NullableStringFieldUpdateOperationsInput | string | null
    fevereiro?: NullableStringFieldUpdateOperationsInput | string | null
    marco?: NullableStringFieldUpdateOperationsInput | string | null
    abril?: NullableStringFieldUpdateOperationsInput | string | null
    maio?: NullableStringFieldUpdateOperationsInput | string | null
    junho?: NullableStringFieldUpdateOperationsInput | string | null
    julho?: NullableStringFieldUpdateOperationsInput | string | null
    agosto?: NullableStringFieldUpdateOperationsInput | string | null
    setembro?: NullableStringFieldUpdateOperationsInput | string | null
    outubro?: NullableStringFieldUpdateOperationsInput | string | null
    novembro?: NullableStringFieldUpdateOperationsInput | string | null
    dezembro?: NullableStringFieldUpdateOperationsInput | string | null
    Servidor?: ServidorUpdateOneWithoutFrequenciaInput
  }

  export type FrequenciaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    janeiro?: NullableStringFieldUpdateOperationsInput | string | null
    fevereiro?: NullableStringFieldUpdateOperationsInput | string | null
    marco?: NullableStringFieldUpdateOperationsInput | string | null
    abril?: NullableStringFieldUpdateOperationsInput | string | null
    maio?: NullableStringFieldUpdateOperationsInput | string | null
    junho?: NullableStringFieldUpdateOperationsInput | string | null
    julho?: NullableStringFieldUpdateOperationsInput | string | null
    agosto?: NullableStringFieldUpdateOperationsInput | string | null
    setembro?: NullableStringFieldUpdateOperationsInput | string | null
    outubro?: NullableStringFieldUpdateOperationsInput | string | null
    novembro?: NullableStringFieldUpdateOperationsInput | string | null
    dezembro?: NullableStringFieldUpdateOperationsInput | string | null
    servidorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrequenciaCreateManyInput = {
    id?: number
    janeiro?: string | null
    fevereiro?: string | null
    marco?: string | null
    abril?: string | null
    maio?: string | null
    junho?: string | null
    julho?: string | null
    agosto?: string | null
    setembro?: string | null
    outubro?: string | null
    novembro?: string | null
    dezembro?: string | null
    servidorId?: string | null
  }

  export type FrequenciaUpdateManyMutationInput = {
    janeiro?: NullableStringFieldUpdateOperationsInput | string | null
    fevereiro?: NullableStringFieldUpdateOperationsInput | string | null
    marco?: NullableStringFieldUpdateOperationsInput | string | null
    abril?: NullableStringFieldUpdateOperationsInput | string | null
    maio?: NullableStringFieldUpdateOperationsInput | string | null
    junho?: NullableStringFieldUpdateOperationsInput | string | null
    julho?: NullableStringFieldUpdateOperationsInput | string | null
    agosto?: NullableStringFieldUpdateOperationsInput | string | null
    setembro?: NullableStringFieldUpdateOperationsInput | string | null
    outubro?: NullableStringFieldUpdateOperationsInput | string | null
    novembro?: NullableStringFieldUpdateOperationsInput | string | null
    dezembro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrequenciaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    janeiro?: NullableStringFieldUpdateOperationsInput | string | null
    fevereiro?: NullableStringFieldUpdateOperationsInput | string | null
    marco?: NullableStringFieldUpdateOperationsInput | string | null
    abril?: NullableStringFieldUpdateOperationsInput | string | null
    maio?: NullableStringFieldUpdateOperationsInput | string | null
    junho?: NullableStringFieldUpdateOperationsInput | string | null
    julho?: NullableStringFieldUpdateOperationsInput | string | null
    agosto?: NullableStringFieldUpdateOperationsInput | string | null
    setembro?: NullableStringFieldUpdateOperationsInput | string | null
    outubro?: NullableStringFieldUpdateOperationsInput | string | null
    novembro?: NullableStringFieldUpdateOperationsInput | string | null
    dezembro?: NullableStringFieldUpdateOperationsInput | string | null
    servidorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumTipoPostoFilter = {
    equals?: TipoPosto
    in?: Enumerable<TipoPosto>
    notIn?: Enumerable<TipoPosto>
    not?: NestedEnumTipoPostoFilter | TipoPosto
  }

  export type ServidorListRelationFilter = {
    every?: ServidorWhereInput
    some?: ServidorWhereInput
    none?: ServidorWhereInput
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type ServidorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostoCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    telefone2?: SortOrder
    telefone3?: SortOrder
    tipoPosto?: SortOrder
  }

  export type PostoMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    telefone2?: SortOrder
    telefone3?: SortOrder
    tipoPosto?: SortOrder
  }

  export type PostoMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    telefone2?: SortOrder
    telefone3?: SortOrder
    tipoPosto?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumTipoPostoWithAggregatesFilter = {
    equals?: TipoPosto
    in?: Enumerable<TipoPosto>
    notIn?: Enumerable<TipoPosto>
    not?: NestedEnumTipoPostoWithAggregatesFilter | TipoPosto
    _count?: NestedIntFilter
    _min?: NestedEnumTipoPostoFilter
    _max?: NestedEnumTipoPostoFilter
  }

  export type PostoRelationFilter = {
    is?: PostoWhereInput
    isNot?: PostoWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    postoId?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    postoId?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    postoId?: SortOrder
  }

  export type FrequenciaListRelationFilter = {
    every?: FrequenciaWhereInput
    some?: FrequenciaWhereInput
    none?: FrequenciaWhereInput
  }

  export type EnumTipoServidorFilter = {
    equals?: TipoServidor
    in?: Enumerable<TipoServidor>
    notIn?: Enumerable<TipoServidor>
    not?: NestedEnumTipoServidorFilter | TipoServidor
  }

  export type PostoListRelationFilter = {
    every?: PostoWhereInput
    some?: PostoWhereInput
    none?: PostoWhereInput
  }

  export type FrequenciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServidorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    matricula?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    cargo?: SortOrder
    data_de_nascimento?: SortOrder
    tipoDoServidor?: SortOrder
  }

  export type ServidorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    matricula?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    cargo?: SortOrder
    data_de_nascimento?: SortOrder
    tipoDoServidor?: SortOrder
  }

  export type ServidorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    matricula?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    cargo?: SortOrder
    data_de_nascimento?: SortOrder
    tipoDoServidor?: SortOrder
  }

  export type EnumTipoServidorWithAggregatesFilter = {
    equals?: TipoServidor
    in?: Enumerable<TipoServidor>
    notIn?: Enumerable<TipoServidor>
    not?: NestedEnumTipoServidorWithAggregatesFilter | TipoServidor
    _count?: NestedIntFilter
    _min?: NestedEnumTipoServidorFilter
    _max?: NestedEnumTipoServidorFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ServidorRelationFilter = {
    is?: ServidorWhereInput | null
    isNot?: ServidorWhereInput | null
  }

  export type FrequenciaCountOrderByAggregateInput = {
    id?: SortOrder
    janeiro?: SortOrder
    fevereiro?: SortOrder
    marco?: SortOrder
    abril?: SortOrder
    maio?: SortOrder
    junho?: SortOrder
    julho?: SortOrder
    agosto?: SortOrder
    setembro?: SortOrder
    outubro?: SortOrder
    novembro?: SortOrder
    dezembro?: SortOrder
    servidorId?: SortOrder
  }

  export type FrequenciaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FrequenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    janeiro?: SortOrder
    fevereiro?: SortOrder
    marco?: SortOrder
    abril?: SortOrder
    maio?: SortOrder
    junho?: SortOrder
    julho?: SortOrder
    agosto?: SortOrder
    setembro?: SortOrder
    outubro?: SortOrder
    novembro?: SortOrder
    dezembro?: SortOrder
    servidorId?: SortOrder
  }

  export type FrequenciaMinOrderByAggregateInput = {
    id?: SortOrder
    janeiro?: SortOrder
    fevereiro?: SortOrder
    marco?: SortOrder
    abril?: SortOrder
    maio?: SortOrder
    junho?: SortOrder
    julho?: SortOrder
    agosto?: SortOrder
    setembro?: SortOrder
    outubro?: SortOrder
    novembro?: SortOrder
    dezembro?: SortOrder
    servidorId?: SortOrder
  }

  export type FrequenciaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type ServidorCreateNestedManyWithoutPostoInput = {
    create?: XOR<Enumerable<ServidorCreateWithoutPostoInput>, Enumerable<ServidorUncheckedCreateWithoutPostoInput>>
    connectOrCreate?: Enumerable<ServidorCreateOrConnectWithoutPostoInput>
    connect?: Enumerable<ServidorWhereUniqueInput>
  }

  export type ProfileCreateNestedOneWithoutPostoInput = {
    create?: XOR<ProfileCreateWithoutPostoInput, ProfileUncheckedCreateWithoutPostoInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostoInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUncheckedCreateNestedOneWithoutPostoInput = {
    create?: XOR<ProfileCreateWithoutPostoInput, ProfileUncheckedCreateWithoutPostoInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostoInput
    connect?: ProfileWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumTipoPostoFieldUpdateOperationsInput = {
    set?: TipoPosto
  }

  export type ServidorUpdateManyWithoutPostoInput = {
    create?: XOR<Enumerable<ServidorCreateWithoutPostoInput>, Enumerable<ServidorUncheckedCreateWithoutPostoInput>>
    connectOrCreate?: Enumerable<ServidorCreateOrConnectWithoutPostoInput>
    upsert?: Enumerable<ServidorUpsertWithWhereUniqueWithoutPostoInput>
    set?: Enumerable<ServidorWhereUniqueInput>
    disconnect?: Enumerable<ServidorWhereUniqueInput>
    delete?: Enumerable<ServidorWhereUniqueInput>
    connect?: Enumerable<ServidorWhereUniqueInput>
    update?: Enumerable<ServidorUpdateWithWhereUniqueWithoutPostoInput>
    updateMany?: Enumerable<ServidorUpdateManyWithWhereWithoutPostoInput>
    deleteMany?: Enumerable<ServidorScalarWhereInput>
  }

  export type ProfileUpdateOneWithoutPostoInput = {
    create?: XOR<ProfileCreateWithoutPostoInput, ProfileUncheckedCreateWithoutPostoInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostoInput
    upsert?: ProfileUpsertWithoutPostoInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutPostoInput, ProfileUncheckedUpdateWithoutPostoInput>
  }

  export type ProfileUncheckedUpdateOneWithoutPostoInput = {
    create?: XOR<ProfileCreateWithoutPostoInput, ProfileUncheckedCreateWithoutPostoInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostoInput
    upsert?: ProfileUpsertWithoutPostoInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutPostoInput, ProfileUncheckedUpdateWithoutPostoInput>
  }

  export type PostoCreateNestedOneWithoutProfileInput = {
    create?: XOR<PostoCreateWithoutProfileInput, PostoUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PostoCreateOrConnectWithoutProfileInput
    connect?: PostoWhereUniqueInput
  }

  export type PostoUpdateOneRequiredWithoutProfileInput = {
    create?: XOR<PostoCreateWithoutProfileInput, PostoUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PostoCreateOrConnectWithoutProfileInput
    upsert?: PostoUpsertWithoutProfileInput
    connect?: PostoWhereUniqueInput
    update?: XOR<PostoUpdateWithoutProfileInput, PostoUncheckedUpdateWithoutProfileInput>
  }

  export type FrequenciaCreateNestedManyWithoutServidorInput = {
    create?: XOR<Enumerable<FrequenciaCreateWithoutServidorInput>, Enumerable<FrequenciaUncheckedCreateWithoutServidorInput>>
    connectOrCreate?: Enumerable<FrequenciaCreateOrConnectWithoutServidorInput>
    createMany?: FrequenciaCreateManyServidorInputEnvelope
    connect?: Enumerable<FrequenciaWhereUniqueInput>
  }

  export type PostoCreateNestedManyWithoutServidoresInput = {
    create?: XOR<Enumerable<PostoCreateWithoutServidoresInput>, Enumerable<PostoUncheckedCreateWithoutServidoresInput>>
    connectOrCreate?: Enumerable<PostoCreateOrConnectWithoutServidoresInput>
    connect?: Enumerable<PostoWhereUniqueInput>
  }

  export type FrequenciaUncheckedCreateNestedManyWithoutServidorInput = {
    create?: XOR<Enumerable<FrequenciaCreateWithoutServidorInput>, Enumerable<FrequenciaUncheckedCreateWithoutServidorInput>>
    connectOrCreate?: Enumerable<FrequenciaCreateOrConnectWithoutServidorInput>
    createMany?: FrequenciaCreateManyServidorInputEnvelope
    connect?: Enumerable<FrequenciaWhereUniqueInput>
  }

  export type EnumTipoServidorFieldUpdateOperationsInput = {
    set?: TipoServidor
  }

  export type FrequenciaUpdateManyWithoutServidorInput = {
    create?: XOR<Enumerable<FrequenciaCreateWithoutServidorInput>, Enumerable<FrequenciaUncheckedCreateWithoutServidorInput>>
    connectOrCreate?: Enumerable<FrequenciaCreateOrConnectWithoutServidorInput>
    upsert?: Enumerable<FrequenciaUpsertWithWhereUniqueWithoutServidorInput>
    createMany?: FrequenciaCreateManyServidorInputEnvelope
    set?: Enumerable<FrequenciaWhereUniqueInput>
    disconnect?: Enumerable<FrequenciaWhereUniqueInput>
    delete?: Enumerable<FrequenciaWhereUniqueInput>
    connect?: Enumerable<FrequenciaWhereUniqueInput>
    update?: Enumerable<FrequenciaUpdateWithWhereUniqueWithoutServidorInput>
    updateMany?: Enumerable<FrequenciaUpdateManyWithWhereWithoutServidorInput>
    deleteMany?: Enumerable<FrequenciaScalarWhereInput>
  }

  export type PostoUpdateManyWithoutServidoresInput = {
    create?: XOR<Enumerable<PostoCreateWithoutServidoresInput>, Enumerable<PostoUncheckedCreateWithoutServidoresInput>>
    connectOrCreate?: Enumerable<PostoCreateOrConnectWithoutServidoresInput>
    upsert?: Enumerable<PostoUpsertWithWhereUniqueWithoutServidoresInput>
    set?: Enumerable<PostoWhereUniqueInput>
    disconnect?: Enumerable<PostoWhereUniqueInput>
    delete?: Enumerable<PostoWhereUniqueInput>
    connect?: Enumerable<PostoWhereUniqueInput>
    update?: Enumerable<PostoUpdateWithWhereUniqueWithoutServidoresInput>
    updateMany?: Enumerable<PostoUpdateManyWithWhereWithoutServidoresInput>
    deleteMany?: Enumerable<PostoScalarWhereInput>
  }

  export type FrequenciaUncheckedUpdateManyWithoutServidorInput = {
    create?: XOR<Enumerable<FrequenciaCreateWithoutServidorInput>, Enumerable<FrequenciaUncheckedCreateWithoutServidorInput>>
    connectOrCreate?: Enumerable<FrequenciaCreateOrConnectWithoutServidorInput>
    upsert?: Enumerable<FrequenciaUpsertWithWhereUniqueWithoutServidorInput>
    createMany?: FrequenciaCreateManyServidorInputEnvelope
    set?: Enumerable<FrequenciaWhereUniqueInput>
    disconnect?: Enumerable<FrequenciaWhereUniqueInput>
    delete?: Enumerable<FrequenciaWhereUniqueInput>
    connect?: Enumerable<FrequenciaWhereUniqueInput>
    update?: Enumerable<FrequenciaUpdateWithWhereUniqueWithoutServidorInput>
    updateMany?: Enumerable<FrequenciaUpdateManyWithWhereWithoutServidorInput>
    deleteMany?: Enumerable<FrequenciaScalarWhereInput>
  }

  export type ServidorCreateNestedOneWithoutFrequenciaInput = {
    create?: XOR<ServidorCreateWithoutFrequenciaInput, ServidorUncheckedCreateWithoutFrequenciaInput>
    connectOrCreate?: ServidorCreateOrConnectWithoutFrequenciaInput
    connect?: ServidorWhereUniqueInput
  }

  export type ServidorUpdateOneWithoutFrequenciaInput = {
    create?: XOR<ServidorCreateWithoutFrequenciaInput, ServidorUncheckedCreateWithoutFrequenciaInput>
    connectOrCreate?: ServidorCreateOrConnectWithoutFrequenciaInput
    upsert?: ServidorUpsertWithoutFrequenciaInput
    disconnect?: boolean
    delete?: boolean
    connect?: ServidorWhereUniqueInput
    update?: XOR<ServidorUpdateWithoutFrequenciaInput, ServidorUncheckedUpdateWithoutFrequenciaInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumTipoPostoFilter = {
    equals?: TipoPosto
    in?: Enumerable<TipoPosto>
    notIn?: Enumerable<TipoPosto>
    not?: NestedEnumTipoPostoFilter | TipoPosto
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumTipoPostoWithAggregatesFilter = {
    equals?: TipoPosto
    in?: Enumerable<TipoPosto>
    notIn?: Enumerable<TipoPosto>
    not?: NestedEnumTipoPostoWithAggregatesFilter | TipoPosto
    _count?: NestedIntFilter
    _min?: NestedEnumTipoPostoFilter
    _max?: NestedEnumTipoPostoFilter
  }

  export type NestedEnumTipoServidorFilter = {
    equals?: TipoServidor
    in?: Enumerable<TipoServidor>
    notIn?: Enumerable<TipoServidor>
    not?: NestedEnumTipoServidorFilter | TipoServidor
  }

  export type NestedEnumTipoServidorWithAggregatesFilter = {
    equals?: TipoServidor
    in?: Enumerable<TipoServidor>
    notIn?: Enumerable<TipoServidor>
    not?: NestedEnumTipoServidorWithAggregatesFilter | TipoServidor
    _count?: NestedIntFilter
    _min?: NestedEnumTipoServidorFilter
    _max?: NestedEnumTipoServidorFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ServidorCreateWithoutPostoInput = {
    id?: string
    nome: string
    telefone?: string | null
    matricula: string
    rg?: string | null
    endereco?: string | null
    cargo?: string | null
    data_de_nascimento?: string | null
    tipoDoServidor?: TipoServidor
    frequencia?: FrequenciaCreateNestedManyWithoutServidorInput
  }

  export type ServidorUncheckedCreateWithoutPostoInput = {
    id?: string
    nome: string
    telefone?: string | null
    matricula: string
    rg?: string | null
    endereco?: string | null
    cargo?: string | null
    data_de_nascimento?: string | null
    tipoDoServidor?: TipoServidor
    frequencia?: FrequenciaUncheckedCreateNestedManyWithoutServidorInput
  }

  export type ServidorCreateOrConnectWithoutPostoInput = {
    where: ServidorWhereUniqueInput
    create: XOR<ServidorCreateWithoutPostoInput, ServidorUncheckedCreateWithoutPostoInput>
  }

  export type ProfileCreateWithoutPostoInput = {
    id?: string
  }

  export type ProfileUncheckedCreateWithoutPostoInput = {
    id?: string
  }

  export type ProfileCreateOrConnectWithoutPostoInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPostoInput, ProfileUncheckedCreateWithoutPostoInput>
  }

  export type ServidorUpsertWithWhereUniqueWithoutPostoInput = {
    where: ServidorWhereUniqueInput
    update: XOR<ServidorUpdateWithoutPostoInput, ServidorUncheckedUpdateWithoutPostoInput>
    create: XOR<ServidorCreateWithoutPostoInput, ServidorUncheckedCreateWithoutPostoInput>
  }

  export type ServidorUpdateWithWhereUniqueWithoutPostoInput = {
    where: ServidorWhereUniqueInput
    data: XOR<ServidorUpdateWithoutPostoInput, ServidorUncheckedUpdateWithoutPostoInput>
  }

  export type ServidorUpdateManyWithWhereWithoutPostoInput = {
    where: ServidorScalarWhereInput
    data: XOR<ServidorUpdateManyMutationInput, ServidorUncheckedUpdateManyWithoutServidoresInput>
  }

  export type ServidorScalarWhereInput = {
    AND?: Enumerable<ServidorScalarWhereInput>
    OR?: Enumerable<ServidorScalarWhereInput>
    NOT?: Enumerable<ServidorScalarWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    telefone?: StringNullableFilter | string | null
    matricula?: StringFilter | string
    rg?: StringNullableFilter | string | null
    endereco?: StringNullableFilter | string | null
    cargo?: StringNullableFilter | string | null
    data_de_nascimento?: StringNullableFilter | string | null
    tipoDoServidor?: EnumTipoServidorFilter | TipoServidor
  }

  export type ProfileUpsertWithoutPostoInput = {
    update: XOR<ProfileUpdateWithoutPostoInput, ProfileUncheckedUpdateWithoutPostoInput>
    create: XOR<ProfileCreateWithoutPostoInput, ProfileUncheckedCreateWithoutPostoInput>
  }

  export type ProfileUpdateWithoutPostoInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateWithoutPostoInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PostoCreateWithoutProfileInput = {
    id?: string
    email: string
    nome?: string | null
    telefone?: string | null
    telefone2?: string | null
    telefone3?: string | null
    tipoPosto?: TipoPosto
    servidores?: ServidorCreateNestedManyWithoutPostoInput
  }

  export type PostoUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    nome?: string | null
    telefone?: string | null
    telefone2?: string | null
    telefone3?: string | null
    tipoPosto?: TipoPosto
  }

  export type PostoCreateOrConnectWithoutProfileInput = {
    where: PostoWhereUniqueInput
    create: XOR<PostoCreateWithoutProfileInput, PostoUncheckedCreateWithoutProfileInput>
  }

  export type PostoUpsertWithoutProfileInput = {
    update: XOR<PostoUpdateWithoutProfileInput, PostoUncheckedUpdateWithoutProfileInput>
    create: XOR<PostoCreateWithoutProfileInput, PostoUncheckedCreateWithoutProfileInput>
  }

  export type PostoUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
    servidores?: ServidorUpdateManyWithoutPostoInput
  }

  export type PostoUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
  }

  export type FrequenciaCreateWithoutServidorInput = {
    janeiro?: string | null
    fevereiro?: string | null
    marco?: string | null
    abril?: string | null
    maio?: string | null
    junho?: string | null
    julho?: string | null
    agosto?: string | null
    setembro?: string | null
    outubro?: string | null
    novembro?: string | null
    dezembro?: string | null
  }

  export type FrequenciaUncheckedCreateWithoutServidorInput = {
    id?: number
    janeiro?: string | null
    fevereiro?: string | null
    marco?: string | null
    abril?: string | null
    maio?: string | null
    junho?: string | null
    julho?: string | null
    agosto?: string | null
    setembro?: string | null
    outubro?: string | null
    novembro?: string | null
    dezembro?: string | null
  }

  export type FrequenciaCreateOrConnectWithoutServidorInput = {
    where: FrequenciaWhereUniqueInput
    create: XOR<FrequenciaCreateWithoutServidorInput, FrequenciaUncheckedCreateWithoutServidorInput>
  }

  export type FrequenciaCreateManyServidorInputEnvelope = {
    data: Enumerable<FrequenciaCreateManyServidorInput>
    skipDuplicates?: boolean
  }

  export type PostoCreateWithoutServidoresInput = {
    id?: string
    email: string
    nome?: string | null
    telefone?: string | null
    telefone2?: string | null
    telefone3?: string | null
    tipoPosto?: TipoPosto
    profile?: ProfileCreateNestedOneWithoutPostoInput
  }

  export type PostoUncheckedCreateWithoutServidoresInput = {
    id?: string
    email: string
    nome?: string | null
    telefone?: string | null
    telefone2?: string | null
    telefone3?: string | null
    tipoPosto?: TipoPosto
    profile?: ProfileUncheckedCreateNestedOneWithoutPostoInput
  }

  export type PostoCreateOrConnectWithoutServidoresInput = {
    where: PostoWhereUniqueInput
    create: XOR<PostoCreateWithoutServidoresInput, PostoUncheckedCreateWithoutServidoresInput>
  }

  export type FrequenciaUpsertWithWhereUniqueWithoutServidorInput = {
    where: FrequenciaWhereUniqueInput
    update: XOR<FrequenciaUpdateWithoutServidorInput, FrequenciaUncheckedUpdateWithoutServidorInput>
    create: XOR<FrequenciaCreateWithoutServidorInput, FrequenciaUncheckedCreateWithoutServidorInput>
  }

  export type FrequenciaUpdateWithWhereUniqueWithoutServidorInput = {
    where: FrequenciaWhereUniqueInput
    data: XOR<FrequenciaUpdateWithoutServidorInput, FrequenciaUncheckedUpdateWithoutServidorInput>
  }

  export type FrequenciaUpdateManyWithWhereWithoutServidorInput = {
    where: FrequenciaScalarWhereInput
    data: XOR<FrequenciaUpdateManyMutationInput, FrequenciaUncheckedUpdateManyWithoutFrequenciaInput>
  }

  export type FrequenciaScalarWhereInput = {
    AND?: Enumerable<FrequenciaScalarWhereInput>
    OR?: Enumerable<FrequenciaScalarWhereInput>
    NOT?: Enumerable<FrequenciaScalarWhereInput>
    id?: IntFilter | number
    janeiro?: StringNullableFilter | string | null
    fevereiro?: StringNullableFilter | string | null
    marco?: StringNullableFilter | string | null
    abril?: StringNullableFilter | string | null
    maio?: StringNullableFilter | string | null
    junho?: StringNullableFilter | string | null
    julho?: StringNullableFilter | string | null
    agosto?: StringNullableFilter | string | null
    setembro?: StringNullableFilter | string | null
    outubro?: StringNullableFilter | string | null
    novembro?: StringNullableFilter | string | null
    dezembro?: StringNullableFilter | string | null
    servidorId?: StringNullableFilter | string | null
  }

  export type PostoUpsertWithWhereUniqueWithoutServidoresInput = {
    where: PostoWhereUniqueInput
    update: XOR<PostoUpdateWithoutServidoresInput, PostoUncheckedUpdateWithoutServidoresInput>
    create: XOR<PostoCreateWithoutServidoresInput, PostoUncheckedCreateWithoutServidoresInput>
  }

  export type PostoUpdateWithWhereUniqueWithoutServidoresInput = {
    where: PostoWhereUniqueInput
    data: XOR<PostoUpdateWithoutServidoresInput, PostoUncheckedUpdateWithoutServidoresInput>
  }

  export type PostoUpdateManyWithWhereWithoutServidoresInput = {
    where: PostoScalarWhereInput
    data: XOR<PostoUpdateManyMutationInput, PostoUncheckedUpdateManyWithoutPostoInput>
  }

  export type PostoScalarWhereInput = {
    AND?: Enumerable<PostoScalarWhereInput>
    OR?: Enumerable<PostoScalarWhereInput>
    NOT?: Enumerable<PostoScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    nome?: StringNullableFilter | string | null
    telefone?: StringNullableFilter | string | null
    telefone2?: StringNullableFilter | string | null
    telefone3?: StringNullableFilter | string | null
    tipoPosto?: EnumTipoPostoFilter | TipoPosto
  }

  export type ServidorCreateWithoutFrequenciaInput = {
    id?: string
    nome: string
    telefone?: string | null
    matricula: string
    rg?: string | null
    endereco?: string | null
    cargo?: string | null
    data_de_nascimento?: string | null
    tipoDoServidor?: TipoServidor
    Posto?: PostoCreateNestedManyWithoutServidoresInput
  }

  export type ServidorUncheckedCreateWithoutFrequenciaInput = {
    id?: string
    nome: string
    telefone?: string | null
    matricula: string
    rg?: string | null
    endereco?: string | null
    cargo?: string | null
    data_de_nascimento?: string | null
    tipoDoServidor?: TipoServidor
  }

  export type ServidorCreateOrConnectWithoutFrequenciaInput = {
    where: ServidorWhereUniqueInput
    create: XOR<ServidorCreateWithoutFrequenciaInput, ServidorUncheckedCreateWithoutFrequenciaInput>
  }

  export type ServidorUpsertWithoutFrequenciaInput = {
    update: XOR<ServidorUpdateWithoutFrequenciaInput, ServidorUncheckedUpdateWithoutFrequenciaInput>
    create: XOR<ServidorCreateWithoutFrequenciaInput, ServidorUncheckedCreateWithoutFrequenciaInput>
  }

  export type ServidorUpdateWithoutFrequenciaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
    Posto?: PostoUpdateManyWithoutServidoresInput
  }

  export type ServidorUncheckedUpdateWithoutFrequenciaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
  }

  export type ServidorUpdateWithoutPostoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
    frequencia?: FrequenciaUpdateManyWithoutServidorInput
  }

  export type ServidorUncheckedUpdateWithoutPostoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
    frequencia?: FrequenciaUncheckedUpdateManyWithoutServidorInput
  }

  export type ServidorUncheckedUpdateManyWithoutServidoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    data_de_nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDoServidor?: EnumTipoServidorFieldUpdateOperationsInput | TipoServidor
  }

  export type FrequenciaCreateManyServidorInput = {
    id?: number
    janeiro?: string | null
    fevereiro?: string | null
    marco?: string | null
    abril?: string | null
    maio?: string | null
    junho?: string | null
    julho?: string | null
    agosto?: string | null
    setembro?: string | null
    outubro?: string | null
    novembro?: string | null
    dezembro?: string | null
  }

  export type FrequenciaUpdateWithoutServidorInput = {
    janeiro?: NullableStringFieldUpdateOperationsInput | string | null
    fevereiro?: NullableStringFieldUpdateOperationsInput | string | null
    marco?: NullableStringFieldUpdateOperationsInput | string | null
    abril?: NullableStringFieldUpdateOperationsInput | string | null
    maio?: NullableStringFieldUpdateOperationsInput | string | null
    junho?: NullableStringFieldUpdateOperationsInput | string | null
    julho?: NullableStringFieldUpdateOperationsInput | string | null
    agosto?: NullableStringFieldUpdateOperationsInput | string | null
    setembro?: NullableStringFieldUpdateOperationsInput | string | null
    outubro?: NullableStringFieldUpdateOperationsInput | string | null
    novembro?: NullableStringFieldUpdateOperationsInput | string | null
    dezembro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrequenciaUncheckedUpdateWithoutServidorInput = {
    id?: IntFieldUpdateOperationsInput | number
    janeiro?: NullableStringFieldUpdateOperationsInput | string | null
    fevereiro?: NullableStringFieldUpdateOperationsInput | string | null
    marco?: NullableStringFieldUpdateOperationsInput | string | null
    abril?: NullableStringFieldUpdateOperationsInput | string | null
    maio?: NullableStringFieldUpdateOperationsInput | string | null
    junho?: NullableStringFieldUpdateOperationsInput | string | null
    julho?: NullableStringFieldUpdateOperationsInput | string | null
    agosto?: NullableStringFieldUpdateOperationsInput | string | null
    setembro?: NullableStringFieldUpdateOperationsInput | string | null
    outubro?: NullableStringFieldUpdateOperationsInput | string | null
    novembro?: NullableStringFieldUpdateOperationsInput | string | null
    dezembro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrequenciaUncheckedUpdateManyWithoutFrequenciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    janeiro?: NullableStringFieldUpdateOperationsInput | string | null
    fevereiro?: NullableStringFieldUpdateOperationsInput | string | null
    marco?: NullableStringFieldUpdateOperationsInput | string | null
    abril?: NullableStringFieldUpdateOperationsInput | string | null
    maio?: NullableStringFieldUpdateOperationsInput | string | null
    junho?: NullableStringFieldUpdateOperationsInput | string | null
    julho?: NullableStringFieldUpdateOperationsInput | string | null
    agosto?: NullableStringFieldUpdateOperationsInput | string | null
    setembro?: NullableStringFieldUpdateOperationsInput | string | null
    outubro?: NullableStringFieldUpdateOperationsInput | string | null
    novembro?: NullableStringFieldUpdateOperationsInput | string | null
    dezembro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostoUpdateWithoutServidoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
    profile?: ProfileUpdateOneWithoutPostoInput
  }

  export type PostoUncheckedUpdateWithoutServidoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
    profile?: ProfileUncheckedUpdateOneWithoutPostoInput
  }

  export type PostoUncheckedUpdateManyWithoutPostoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    telefone2?: NullableStringFieldUpdateOperationsInput | string | null
    telefone3?: NullableStringFieldUpdateOperationsInput | string | null
    tipoPosto?: EnumTipoPostoFieldUpdateOperationsInput | TipoPosto
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}